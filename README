Classerize
Classerize is a modern educational platform designed to help users seamlessly manage their courses, assignments, and calendars across multiple LMS platforms like Canvas and Blackboard. This project integrates various technologies to provide users with a centralized and efficient experience.

Secure registration and login with hashed passwords.
LMS Integration:

Link multiple LMS accounts like Canvas or Blackboard.
Fetch and manage courses and assignments.
Course and Assignment Management:

View aggregated course data.
Track assignment deadlines and statuses.
Notifications:

Receive reminders for upcoming deadlines via email or web notifications.(Planned)
Calendar Integration:

View important dates for courses and assignments.
Responsive Design:

Optimized for desktop and mobile devices.
Technologies
Frontend: React.js, Next.js
Backend: Node.js, Express.js
Database: MySQL
Authentication: JWT for secure token-based authentication.
LMS Integration: Canvas API (support for other LMS APIs planned).
Session Management: Express MySQL Sessions.
Notifications: Email/web notifications using third-party services.
Styling: Tailwind CSS (or similar framework).
Setup Instructions
Prerequisites
Node.js (v16 or higher)
MySQL (v8.0 or higher)
Git
npm or yarn
Installation
Clone the repository:

bash
Copy code
git clone https://github.com/your-username/classerize.git
cd classerize
Install dependencies:

bash
Copy code
npm install
Set up the database:

Import the schema from the provided schema.sql file into your MySQL instance:
bash
Copy code
mysql -u your_user -p classerize < schema.sql
Configure the environment:

Create a .env file in the root directory with the following variables:
makefile
Copy code
PORT=5000
DATABASE_HOST=localhost
DATABASE_PORT=3306
DATABASE_USER=your_user
DATABASE_PASSWORD=your_password
DATABASE_NAME=classerize
JWT_SECRET=your_jwt_secret
LMS_API_BASE_URL=https://canvas.instructure.com
LMS_ACCESS_TOKEN=your_canvas_access_token
Start the application:

bash
Copy code
npm run dev
Open the application in your browser at http://localhost:5000.

Database Schema
The database schema includes the following tables:

users: Stores user information.
sessions: Handles user authentication sessions.
linked_accounts: Manages LMS accounts linked by users.
courses: Stores course details aggregated from LMS platforms.
assignments: Stores assignments tied to courses.
notifications: Manages assignment reminders and notifications.
calendar_events: Stores calendar events for users.
Refer to the schema.sql file for details.

Environment Variables
The project relies on several critical environment variables. Ensure you configure these properly in the .env file:

Variable	Description
PORT	The port the server runs on (default: 5000).
DATABASE_HOST	Hostname of the MySQL server.
DATABASE_PORT	Port of the MySQL server (default: 3306).
DATABASE_USER	Username for MySQL database.
DATABASE_PASSWORD	Password for MySQL database.
DATABASE_NAME	Name of the MySQL database (default: classerize).
JWT_SECRET	Secret key for signing JWT tokens.
LMS_API_BASE_URL	Base URL for LMS API (e.g., Canvas).
LMS_ACCESS_TOKEN	Access token for LMS API integration.
API Endpoints
User Routes
POST /api/auth/register: Register a new user.
POST /api/auth/login: Login a user.
LMS Integration
GET /api/canvas/:userId/accounts: Get linked LMS accounts.
POST /api/canvas/:userId/accounts: Link a new LMS account.
Course and Assignment Management
GET /api/canvas/:userId/courses: Fetch courses.
GET /api/canvas/:userId/courses/:courseId/assignments: Fetch assignments for a course.
